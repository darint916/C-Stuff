        -:    0:Source:test_huffman.c
        -:    0:Graph:test_huffman.gcno
        -:    0:Data:test_huffman.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <stdbool.h>
        -:    4:#include <assert.h>
        -:    5:#include "miniunit.h"
        -:    6:#include "huffman.h"
        -:    7:
        3:    8:static void _destroy_tree(void* node){
        3:    9:	free((TreeNode*)node);
        3:   10:}
        -:   11:	
        -:   12:
        1:   13:int _test(){
        1:   14:	mu_start();
        -:   15:
        1:   16:	const char* path = "expected.txt";
        -:   17:	const char* a_error;
        -:   18:	
        -:   19:/*	uchar c = 244;
        -:   20:	FILE* file = fopen(path, "w");
        -:   21:	fputc(c, file);
        -:   22:	fclose(file);
        -:   23:*/
        1:   24:	Frequencies freq = {0};
       1*:   25:	mu_check(calc_frequencies(freq, path, &a_error));
      257:   26:	for(uint64_t i = 0; i <= 255; i++){
      256:   27:		if(freq[i] != 0){
        3:   28:			printf(" %ld : #%4ld\n", i,freq[i]);
        -:   29:		}
        -:   30:	}
        -:   31:
        1:   32:	Node* node = make_huffman_pq(freq);
        1:   33:	printf("sec freq: %ld\n", ((TreeNode*)(node -> next -> a_value)) -> frequency);
        1:   34:	destroy_list(&node, _destroy_tree);
        1:   35:	mu_end();
        -:   36:}
        -:   37:
        1:   38:int main(int argc, char* argv[]) {
       1*:   39:	mu_run(_test);
        1:   40:	return EXIT_SUCCESS;
        -:   41:}
        -:   42:/* vim: set tabstop=4 shiftwidth=4 fileencoding=utf-8 noexpandtab: */
