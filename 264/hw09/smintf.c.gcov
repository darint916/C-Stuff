        -:    0:Source:smintf.c
        -:    0:Graph:smintf.gcno
        -:    0:Data:smintf.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* vim: set tabstop=4 shiftwidth=4 fileencoding=utf-8 noexpandtab: */
        -:    2:#include <stdarg.h>
        -:    3:#include <stdbool.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#define HW09_BONUS
        -:    7:
        -:    8:void _lenReplacer(const char *format, va_list vaList, int *resLen, char *res);
        -:    9:void _printc(char);
        -:   10:
        -:   11://If entered with length 0, calculates length, if given length, reformat input into provided radix and saves into pointer.
       30:   12:void _change_integer(int n, int radix, char* prefix, int * length, char* result) {	
       30:   13:	int count = 0;
       30:   14:	if(n < 0) {   				
       10:   15:		if(*length > 0){
        3:   16:			result[count] = '-';
        7:   17:		} else if(*length == -1) {
        4:   18:			_printc('-');
        -:   19:		}
       10:   20:		count++;
        -:   21:	}
       67:   22:	for(int i = 0; prefix[i] != '\0'; i++) {
       37:   23:		if(*length > 0){
       13:   24:			result[count] = prefix[i];
       24:   25:		} else if(*length == -1) {
       11:   26:			_printc(prefix[i]);
        -:   27:		}
       37:   28:		count++;
        -:   29:	}
        -:   30:	 //Finds largest divider that is a multiple of radix
       30:   31:	int largestDiv = 1;
      245:   32:	while(n / largestDiv / radix != 0) {  
      215:   33:		largestDiv *= radix;
        -:   34:	}
        -:   35:	//Finds equivalent base value of inputted number and outputs starting from most significant digit 
      275:   36:	while(largestDiv != 0) {
      245:   37:		int dig = n / largestDiv;
      245:   38:		if(dig < 0) {
      110:   39:			dig *= -1;
        -:   40:		}
      245:   41:		if(dig > 9) {
       23:   42:			if(*length > 0){
        8:   43:				result[count] = (dig - 10) + 'a';
       15:   44:			} else if(*length == -1) {
        7:   45:				_printc((dig - 10) + 'a');
        -:   46:			}
       23:   47:			count++;
        -:   48:		}else {
      222:   49:			if(*length > 0){
       64:   50:				result[count] = dig + '0';
      158:   51:			} else if(*length == -1) {
       94:   52:				_printc(dig + '0');
        -:   53:			}
      222:   54:			count++;
        -:   55:		}
      245:   56:		n %= largestDiv;
      245:   57:		largestDiv /= radix;
        -:   58:	}
       30:   59:	*length = count;
       30:   60:}
        -:   61:
        -:   62://printer help function
      148:   63:void _printc(char in){ 
      148:   64:	fputc(in, stdout);
      148:   65:}
        -:   66:
        -:   67://format and allocates memory instead of output
        7:   68:char* smintf(const char *format, ...){
        -:   69:	va_list vaList, vaListCpy;
        7:   70:	va_start(vaList, format);
        7:   71:	va_copy(vaListCpy, vaList);
        7:   72:	int length = 0;
        7:   73:	_lenReplacer(format, vaListCpy, &length, "");
        7:   74:	char* res = malloc(length * sizeof(char)+1);
        7:   75:	if(res != NULL) {
        7:   76:		_lenReplacer(format, vaList, &length, res);
        -:   77:	}
        7:   78:	return res; 
        -:   79:}
        -:   80:
        -:   81://format and outputs into stdout
        4:   82:void mintf(const char *format, ...){
        -:   83:	va_list vaList, vaListCpy;
        4:   84:	va_start(vaList, format);
        4:   85:	va_copy(vaListCpy, vaList);
        4:   86:	int length = -1;
        4:   87:	_lenReplacer(format, vaListCpy, &length, "");
        4:   88:}
        -:   89:
        -:   90://replaces format specifiers with specified result if length is defined, if not, finds length.
       18:   91:void _lenReplacer(const char *format, va_list vaList, int *resLen, char *res){
        -:   92:	//Loops through to find format specifiers and prints accordingly
       18:   93:	int tempLen = 0;
       18:   94:	int totLen = 0;
      181:   95:	for(int i = 0; format[i] != '\0'; i++){
      170:   96:		if(format[i] == '%'){
       45:   97:			i++;
        -:   98:			//Placeholder variables for manipulation within switch
        -:   99:			int numPlace;    
        -:  100:			char * charPlace;
       45:  101:			switch(format[i]){
        8:  102:				case 'd':
        8:  103:					tempLen = *resLen;
        8:  104:					_change_integer(va_arg(vaList, int), 10, "", &tempLen, res + totLen);
        8:  105:					totLen += tempLen;
        8:  106:					tempLen = 0;
        8:  107:					break;
        6:  108:				case 'x':
        6:  109:					tempLen = *resLen;
        6:  110:					_change_integer(va_arg(vaList, int), 16, "0x", &tempLen, res + totLen);
        6:  111:					totLen += tempLen;
        6:  112:					tempLen = 0;
        6:  113:					break;
        6:  114:				case 'b':
        6:  115:					tempLen = *resLen;
        6:  116:					_change_integer(va_arg(vaList, int), 2, "0b", &tempLen, res + totLen);
        6:  117:					totLen += tempLen;
        6:  118:					tempLen = 0;
        6:  119:					break;
        5:  120:				case '$':
        5:  121:					numPlace = va_arg(vaList, int);
        5:  122:					if(numPlace < 0 && abs(numPlace) < 100){
        3:  123:						if(*resLen > 0){
        1:  124:							*(res + totLen) = '-';
        2:  125:						} else if(*resLen == -1){
        1:  126:							_printc('-');
        -:  127:						}
        3:  128:						totLen++;
        -:  129:					}
        5:  130:					tempLen = *resLen;
        5:  131:					_change_integer(numPlace / 100, 10, "$", &tempLen, res + totLen);
        5:  132:					totLen += tempLen;
        5:  133:					tempLen = 0;
        -:  134:
        5:  135:					numPlace = abs(numPlace) % 100;
        5:  136:					if(numPlace < 10){
        3:  137:						tempLen = *resLen;
        3:  138:						_change_integer(numPlace, 10, ".0", &tempLen, res + totLen);
        3:  139:						totLen += tempLen;
        3:  140:						tempLen = 0;
        -:  141:					}
        -:  142:					else{
        2:  143:						tempLen = *resLen;
        2:  144:						_change_integer(numPlace, 10, ".", &tempLen, res + totLen);
        2:  145:						totLen += tempLen;
        2:  146:						tempLen = 0;
        -:  147:					}
        5:  148:					break;
        3:  149:				case '%':
        3:  150:					if(*resLen > 0){
        1:  151:						*(res + totLen) = '%';
        2:  152:					} else if(*resLen == -1){
        1:  153:						_printc('%');
        -:  154:					}
        3:  155:					totLen++;
        3:  156:					break;
        7:  157:				case '\0':
        7:  158:					if(*resLen > 0){
        3:  159:						*(res + totLen) = '%';
        3:  160:						*(res + totLen + 1) = '\0';
        4:  161:					} else if(*resLen == -1) {
        1:  162:						_printc('%');
        -:  163:					}
        7:  164:					totLen += 2;
        7:  165:					*resLen = totLen;
        7:  166:					return;
        3:  167:				case 's':
        3:  168:					charPlace = va_arg(vaList, char *);
       12:  169:					for(int j = 0; charPlace[j] != '\0'; j++){
        9:  170:						if(*resLen > 0){
        3:  171:							*(res + totLen) = charPlace[j];
        6:  172:						} else if(*resLen == -1) {
        3:  173:							_printc(charPlace[j]);
        -:  174:						}
        9:  175:						totLen++;
        -:  176:					}
        3:  177:					break;
        3:  178:				case 'c':
        3:  179:					if(*resLen > 0){
        1:  180:						*(res + totLen) = (char)va_arg(vaList, int);
        2:  181:					} else if(*resLen == -1) {
        1:  182:						_printc((char)va_arg(vaList, int));
        -:  183:					}
        3:  184:					totLen++;
        3:  185:					break;
        4:  186:				default:
        4:  187:					if(*resLen > 0){
        1:  188:						*(res + totLen) = '%';
        3:  189:					} else if(*resLen == -1) {
        2:  190:						_printc('%');
        -:  191:					}
        4:  192:					totLen++;
        4:  193:					if(*resLen > 0){
        1:  194:						*(res + totLen) = format[i];
        3:  195:					} else if(*resLen == -1) {
        2:  196:						_printc(format[i]);
        -:  197:					}
        4:  198:					totLen++;
        -:  199:			}
        -:  200:		}
        -:  201:		else{
      125:  202:			if(*resLen > 0){
       52:  203:				*(res + totLen) = format[i];
       73:  204:			} else if(*resLen == -1) {
       21:  205:				_printc(format[i]);
        -:  206:			}
      125:  207:			totLen++;
        -:  208:		}
        -:  209:	}
       11:  210:	if(*resLen > 0){
        4:  211:		*(res + totLen) = '\0';
        -:  212:	}
       11:  213:	*resLen = totLen;
       11:  214:	return;
        -:  215:}
